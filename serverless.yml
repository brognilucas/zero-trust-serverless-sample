org: lucasbrogni
app: zero-trust-file-apis
service: zero-trust-confidential-files-api

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  environment:
    USER_TABLE_NAME: Users-${self:provider.stage}
    RESEND_API_KEY: ${param:resendApiKey}
    MFA_CODE_TABLE_NAME: MfaCodes-${self:provider.stage}
    MFA_TTL_SECONDS: 300
    JWT_SECRET: ${param:jwtSecret}
    EMAIL_FROM: ${param:emailFrom}
    S3_UPLOAD_BUCKET_NAME: ${param:s3UploadBucketName}-${self:provider.stage}
    S3_PRESIGNED_URL_EXPIRATION: 300

  httpApi:
    authorizers:
      authorizer:
        type: request
        identitySource: "$request.header.Authorization"
        functionName: authorizer
        enableSimpleResponses: true


functions:
  signup:
    handler: auth/signup.handler
    events:
      - httpApi:
          path: /signup
          method: post
    role: SignupLambdaRole

  signin:
    handler: auth/signin.handler
    events:
      - httpApi:
          path: /signin
          method: post
    role: SigninLambdaRole

  verifyMfa:
    handler: auth/verify-mfa.handler
    events:
      - httpApi:
          path: /verify-mfa
          method: post
    role: VerifyMfaLambdaRole

  authorizer:
    handler: auth/jwt-authorizer.handler

  getPresignedURL:
    handler: getPresignedURL/index.handler
    events:
      - httpApi:
          path: /files/get-upload-url
          method: post
          authorizer: 
            type: request
            name: authorizer
    role: GetPresignedURLLambdaRole

  getListOfUserFiles:
    handler: getFilesForUser/index.handler
    events:
      - httpApi:
          path: /files/list
          method: get
          authorizer: 
            type: request
            name: authorizer
    role: GetListOfUserFilesLambdaRole

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${param:s3UploadBucketName}-${self:provider.stage}
        Tags:
          - Key: Name
            Value: ${param:s3UploadBucketName}-${self:provider.stage}
          - Key: Description
            Value: Confidential files upload bucket
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
                
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: false

    MfaCodesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MfaCodes-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    SignupLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: zero-trust-confidential-files-api-signup-lambda-role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: SignupLambdaPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/Users-${self:provider.stage}

    SigninLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: zero-trust-confidential-files-api-signin-lambda-role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: SigninLambdaPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                  Resource:
                    - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/Users-${self:provider.stage}
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/MfaCodes-${self:provider.stage}

    VerifyMfaLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: zero-trust-confidential-files-api-verify-mfa-lambda-role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: VerifyMfaLambdaPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:DeleteItem
                  Resource:
                    - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/MfaCodes-${self:provider.stage}

    GetPresignedURLLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: get-presigned-url-lambda-role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: GetPresignedURLLambdaPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    - arn:aws:s3:::${param:s3UploadBucketName}-${self:provider.stage}/*

    GetListOfUserFilesLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: get-list-of-user-files-lambda-role-${self:provider.stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole  
        Policies:
          - PolicyName: GetPresignedURLLambdaPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::${param:s3UploadBucketName}-${self:provider.stage}
package:
  exclude:
    - .gitignore
    - .git/**
    - __tests__/**
